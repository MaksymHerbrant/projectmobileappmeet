import 'package:flutter/material.dart';
import '../models/user_profile.dart';
import '../models/event.dart';
import '../models/message.dart';
import '../services/mock_data_service.dart';

class AppStateProvider extends ChangeNotifier {
  final MockDataService _mockDataService = MockDataService();
  
  // –ü–æ—Ç–æ—á–Ω–∏–π –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á
  UserProfile? _currentUser;
  UserProfile? get currentUser => _currentUser;
  
  // –°–ø–∏—Å–æ–∫ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ –¥–ª—è —Å–≤–∞–π–ø–µ—Ä–∞
  List<UserProfile> _users = [];
  List<UserProfile> get users => _users;
  
  // –ú–∞—Ç—á—ñ
  List<Map<String, dynamic>> _matches = [];
  List<Map<String, dynamic>> get matches => _matches;
  
  // –ü–æ–¥—ñ—ó
  List<Event> _events = [];
  List<Event> get events => _events;
  
  // –ß–∞—Ç–æ–≤—ñ —Ä–æ–∑–º–æ–≤–∏
  List<ChatConversation> _conversations = [];
  List<ChatConversation> get conversations => _conversations;
  
  // –ê–∫—Ç–∏–≤–Ω—ñ –∫–æ–Ω—Ç–∞–∫—Ç–∏
  List<ActiveContact> _activeContacts = [];
  List<ActiveContact> get activeContacts => _activeContacts;
  
  // –õ–∞–π–∫–∏ —Ç–∞ –¥–∏–∑–ª–∞–π–∫–∏
  Set<String> _likedUsers = {};
  Set<String> _dislikedUsers = {};
  
  // –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è
  AppStateProvider() {
    _initializeData();
  }
  
  void _initializeData() {
    _users = _mockDataService.getUsers();
    _matches = _mockDataService.getMatchesWithMessages();
    _events = _mockDataService.getEvents();
    _conversations = _mockDataService.getConversations();
    _activeContacts = _mockDataService.getActiveContacts();
    
    // –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ –ø–æ—Ç–æ—á–Ω–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ (–º–æ–∫)
    _currentUser = UserProfile(
      id: 'current_user',
      name: '–¢–∏',
      age: 25,
      description: '–õ—é–±–ª—é –ø–æ–¥–æ—Ä–æ–∂—ñ, –º—É–∑–∏–∫—É —Ç–∞ –Ω–æ–≤—ñ –∑–Ω–∞–π–æ–º—Å—Ç–≤–∞',
      photos: ['assets/images/portrait-man-laughing.jpg'],
      location: '–ö–∏—ó–≤',
      hobbies: ['–ü–æ–¥–æ—Ä–æ–∂—ñ', '–ú—É–∑–∏–∫–∞', '–°–ø–æ—Ä—Ç', '–ö–Ω–∏–≥–∏'],
    );
  }
  
  // –õ–∞–π–∫ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
  void likeUser(String userId) {
    if (!_likedUsers.contains(userId) && !_dislikedUsers.contains(userId)) {
      _likedUsers.add(userId);
      
      // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ —î –≤–∑–∞—î–º–Ω–∏–π –ª–∞–π–∫ (–º–∞—Ç—á)
      final likedUser = _users.firstWhere((user) => user.id == userId);
      if (_checkForMatch(likedUser)) {
        _createMatch(likedUser);
      }
      
      notifyListeners();
    }
  }
  
  // –î–∏–∑–ª–∞–π–∫ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
  void dislikeUser(String userId) {
    if (!_likedUsers.contains(userId) && !_dislikedUsers.contains(userId)) {
      _dislikedUsers.add(userId);
      notifyListeners();
    }
  }
  
  // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞ –º–∞—Ç—á
  bool _checkForMatch(UserProfile likedUser) {
    // –í —Ä–µ–∞–ª—å–Ω–æ–º—É –¥–æ–¥–∞—Ç–∫—É —Ç—É—Ç –±—É–ª–∞ –± –ª–æ–≥—ñ–∫–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –≤–∑–∞—î–º–Ω–æ–≥–æ –ª–∞–π–∫—É
    // –î–ª—è –º–æ–∫-–¥–∞–Ω–∏—Ö –ø—Ä–æ—Å—Ç–æ –ø–æ–≤–µ—Ä—Ç–∞—î–º–æ true –∑ –π–º–æ–≤—ñ—Ä–Ω—ñ—Å—Ç—é 30%
    return DateTime.now().millisecondsSinceEpoch % 3 == 0;
  }
  
  // –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –º–∞—Ç—á—É
  void _createMatch(UserProfile matchedUser) {
    final match = {
      'user': matchedUser,
      'message': '–í–∏ –ø–æ–Ω—Ä–∞–≤–∏–ª–∏—Å—è –æ–¥–∏–Ω –æ–¥–Ω–æ–º—É! üíï',
      'hasMessage': true,
      'matchedAt': DateTime.now(),
    };
    
    _matches.insert(0, match);
    
    // –°—Ç–≤–æ—Ä—é—î–º–æ —á–∞—Ç–æ–≤—É —Ä–æ–∑–º–æ–≤—É
    final conversation = ChatConversation(
      id: 'match_${matchedUser.id}',
      userId: matchedUser.id,
      userName: matchedUser.name,
      userPhoto: matchedUser.photos.first,
      lastMessage: '–í–∏ –ø–æ–Ω—Ä–∞–≤–∏–ª–∏—Å—è –æ–¥–∏–Ω –æ–¥–Ω–æ–º—É! üíï',
      lastMessageTime: DateTime.now(),
      unreadCount: 1,
      isOnline: true,
    );
    
    _conversations.insert(0, conversation);
  }
  
  // –û—Ç—Ä–∏–º–∞–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å –¥–ª—è —Ä–æ–∑–º–æ–≤–∏
  List<Message> getMessagesForConversation(String conversationId) {
    return _mockDataService.getMessages(conversationId);
  }
  
  // –í—ñ–¥–ø—Ä–∞–≤–∫–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
  void sendMessage(String conversationId, String content) {
    final message = Message(
      id: DateTime.now().millisecondsSinceEpoch.toString(),
      senderId: 'current_user',
      receiverId: conversationId,
      content: content,
      timestamp: DateTime.now(),
      isRead: false,
    );
    
    // –û–Ω–æ–≤–ª—é—î–º–æ –æ—Å—Ç–∞–Ω–Ω—î –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤ —Ä–æ–∑–º–æ–≤—ñ
    final conversationIndex = _conversations.indexWhere((c) => c.id == conversationId);
    if (conversationIndex != -1) {
      _conversations[conversationIndex] = ChatConversation(
        id: _conversations[conversationIndex].id,
        userId: _conversations[conversationIndex].userId,
        userName: _conversations[conversationIndex].userName,
        userPhoto: _conversations[conversationIndex].userPhoto,
        lastMessage: '–¢–∏: $content',
        lastMessageTime: DateTime.now(),
        unreadCount: _conversations[conversationIndex].unreadCount,
        isOnline: _conversations[conversationIndex].isOnline,
        isTyping: _conversations[conversationIndex].isTyping,
      );
    }
    
    notifyListeners();
  }
  
  // –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –ø–æ–¥—ñ—ó
  void createEvent(Event event) {
    _events.add(event);
    notifyListeners();
  }
  
  // –ü—Ä–∏—î–¥–Ω–∞–Ω–Ω—è –¥–æ –ø–æ–¥—ñ—ó
  void joinEvent(String eventId) {
    // –í —Ä–µ–∞–ª—å–Ω–æ–º—É –¥–æ–¥–∞—Ç–∫—É —Ç—É—Ç –±—É–ª–∞ –± –ª–æ–≥—ñ–∫–∞ –ø—Ä–∏—î–¥–Ω–∞–Ω–Ω—è –¥–æ –ø–æ–¥—ñ—ó
    notifyListeners();
  }
  
  // –û—á–∏—â–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö
  void clearData() {
    _users.clear();
    _matches.clear();
    _events.clear();
    _conversations.clear();
    _activeContacts.clear();
    _likedUsers.clear();
    _dislikedUsers.clear();
    notifyListeners();
  }
}
